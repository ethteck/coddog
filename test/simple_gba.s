@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	cat
.data
	.align	2, 0
	.type	 cat,object
	.size	 cat,4
cat:
	.word	1
	.globl	dog
	.align	2, 0
	.type	 dog,object
	.size	 dog,4
dog:
	.word	5
	.section .rodata
	.align	2, 0
.LC0:
	.word	cat
	.align	2, 0
.LC1:
	.word	dog
	.align	2, 0
.LC2:
	.word	.L10
.text
	.align	2, 0
	.globl	test_1
	.type	 test_1,function
	.thumb_func
test_1:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, [r7]
	cmp	r0, #4
	bhi	.L9	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #2
	ldr	r1, .L11
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	pc, r1
.L12:
	.align	2, 0
.L11:
	.word	.L10
	.align	2, 0
	.align	2, 0
.L10:
	.word	.L4
	.word	.L5
	.word	.L6
	.word	.L7
	.word	.L8
.L4:
	ldr	r1, .L13
	ldr	r0, [r1]
	ldr	r1, .L13+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_1
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L2
.L14:
	.align	2, 0
.L13:
	.word	cat
	.word	dog
.L5:
	ldr	r1, .L15
	ldr	r0, [r1]
	ldr	r1, .L15+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_2
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L2
.L16:
	.align	2, 0
.L15:
	.word	cat
	.word	dog
.L6:
	ldr	r1, .L17
	ldr	r0, [r1]
	bl	__floatsisf
	add	r4, r0, #0
	ldr	r1, .L17+4
	ldr	r0, [r1]
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r4, #0
	bl	some_external_function
	add	r1, r0, #0
	add	r0, r1, #0
	bl	__fixsfsi
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L2
.L18:
	.align	2, 0
.L17:
	.word	cat
	.word	dog
.L7:
	mov	r0, #5
	b	.L2
.L8:
	mov	r0, #5
	b	.L2
.L9:
	mov	r0, #1
	neg	r0, r0
	b	.L2
.L3:
.L2:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe1:
	.size	 test_1,.Lfe1-test_1
	.section .rodata
	.align	2, 0
.LC3:
	.word	cat
	.align	2, 0
.LC4:
	.word	dog
	.align	2, 0
.LC5:
	.word	.L27
.text
	.align	2, 0
	.globl	test_2
	.type	 test_2,function
	.thumb_func
test_2:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, [r7]
	cmp	r0, #4
	bhi	.L26	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #2
	ldr	r1, .L28
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	pc, r1
.L29:
	.align	2, 0
.L28:
	.word	.L27
	.align	2, 0
	.align	2, 0
.L27:
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L24
	.word	.L25
.L21:
	ldr	r1, .L30
	ldr	r0, [r1]
	ldr	r1, .L30+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_2
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L19
.L31:
	.align	2, 0
.L30:
	.word	cat
	.word	dog
.L22:
	ldr	r1, .L32
	ldr	r0, [r1]
	ldr	r1, .L32+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_1
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L19
.L33:
	.align	2, 0
.L32:
	.word	cat
	.word	dog
.L23:
	ldr	r1, .L34
	ldr	r0, [r1]
	bl	__floatsisf
	add	r4, r0, #0
	ldr	r1, .L34+4
	ldr	r0, [r1]
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r4, #0
	bl	some_external_function
	add	r1, r0, #0
	add	r0, r1, #0
	bl	__fixsfsi
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L19
.L35:
	.align	2, 0
.L34:
	.word	cat
	.word	dog
.L24:
	mov	r0, #5
	b	.L19
.L25:
	mov	r0, #5
	b	.L19
.L26:
	mov	r0, #1
	neg	r0, r0
	b	.L19
.L20:
.L19:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe2:
	.size	 test_2,.Lfe2-test_2
	.section .rodata
	.align	2, 0
.LC6:
	.word	cat
	.align	2, 0
.LC7:
	.word	dog
	.align	2, 0
.LC8:
	.word	.L44
.text
	.align	2, 0
	.globl	test_3
	.type	 test_3,function
	.thumb_func
test_3:
	push	{r4, r7, lr}
	add	sp, sp, #-4
	mov	r7, sp
	str	r0, [r7]
	ldr	r0, [r7]
	cmp	r0, #4
	bhi	.L43	@cond_branch
	ldr	r0, [r7]
	add	r1, r0, #0
	lsl	r0, r1, #2
	ldr	r1, .L45
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	pc, r1
.L46:
	.align	2, 0
.L45:
	.word	.L44
	.align	2, 0
	.align	2, 0
.L44:
	.word	.L38
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
.L38:
	ldr	r1, .L47
	ldr	r0, [r1]
	ldr	r1, .L47+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_1
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L36
.L48:
	.align	2, 0
.L47:
	.word	cat
	.word	dog
.L39:
	ldr	r1, .L49
	ldr	r0, [r1]
	ldr	r1, .L49+4
	ldr	r2, [r1]
	add	r1, r2, #0
	bl	math_op_1
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L36
.L50:
	.align	2, 0
.L49:
	.word	cat
	.word	dog
.L40:
	ldr	r1, .L51
	ldr	r0, [r1]
	bl	__floatsisf
	add	r4, r0, #0
	ldr	r1, .L51+4
	ldr	r0, [r1]
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r4, #0
	bl	some_external_function
	add	r1, r0, #0
	add	r0, r1, #0
	bl	__fixsfsi
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L36
.L52:
	.align	2, 0
.L51:
	.word	cat
	.word	dog
.L41:
	mov	r0, #5
	b	.L36
.L42:
	mov	r0, #5
	b	.L36
.L43:
	mov	r0, #1
	neg	r0, r0
	b	.L36
.L37:
.L36:
	add	sp, sp, #4
	pop	{r4, r7, pc}
.Lfe3:
	.size	 test_3,.Lfe3-test_3
	.align	2, 0
	.globl	math_op_1
	.type	 math_op_1,function
	.thumb_func
math_op_1:
	push	{r4, r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	str	r1, [r7, #4]
	ldr	r0, [r7]
	bl	__floatsisf
	add	r4, r0, #0
	ldr	r0, [r7, #4]
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r4, #0
	bl	some_external_function
	add	r4, r0, #0
	ldr	r0, [r7]
	ldr	r2, [r7, #4]
	add	r1, r0, r2
	add	r0, r1, #0
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r1, #0
	add	r1, r4, #0
	bl	__addsf3
	add	r1, r0, #0
	add	r0, r1, #0
	bl	__fixsfsi
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L53
.L53:
	add	sp, sp, #8
	pop	{r4, r7, pc}
.Lfe4:
	.size	 math_op_1,.Lfe4-math_op_1
	.align	2, 0
	.globl	math_op_2
	.type	 math_op_2,function
	.thumb_func
math_op_2:
	push	{r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	str	r1, [r7, #4]
	ldr	r0, [r7]
	ldr	r2, [r7, #4]
	sub	r1, r0, r2
	add	r0, r1, #0
	b	.L54
.L54:
	add	sp, sp, #8
	pop	{r7, pc}
.Lfe5:
	.size	 math_op_2,.Lfe5-math_op_2
	.align	2, 0
	.globl	math_op_1_dup
	.type	 math_op_1_dup,function
	.thumb_func
math_op_1_dup:
	push	{r4, r7, lr}
	add	sp, sp, #-8
	mov	r7, sp
	str	r0, [r7]
	str	r1, [r7, #4]
	ldr	r0, [r7]
	bl	__floatsisf
	add	r4, r0, #0
	ldr	r0, [r7, #4]
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r4, #0
	bl	some_external_function
	add	r4, r0, #0
	ldr	r0, [r7]
	ldr	r2, [r7, #4]
	add	r1, r0, r2
	add	r0, r1, #0
	bl	__floatsisf
	add	r1, r0, #0
	add	r0, r1, #0
	add	r1, r4, #0
	bl	__addsf3
	add	r1, r0, #0
	add	r0, r1, #0
	bl	__fixsfsi
	add	r1, r0, #0
	add	r0, r1, #0
	b	.L55
.L55:
	add	sp, sp, #8
	pop	{r4, r7, pc}
.Lfe6:
	.size	 math_op_1_dup,.Lfe6-math_op_1_dup
