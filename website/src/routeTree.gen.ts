/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SymbolSymbolSlugIndexRouteImport } from './routes/symbol/$symbolSlug/index'
import { Route as SymbolSymbolSlugSubmatchRouteImport } from './routes/symbol/$symbolSlug/submatch'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SymbolSymbolSlugIndexRoute = SymbolSymbolSlugIndexRouteImport.update({
  id: '/symbol/$symbolSlug/',
  path: '/symbol/$symbolSlug/',
  getParentRoute: () => rootRouteImport,
} as any)
const SymbolSymbolSlugSubmatchRoute =
  SymbolSymbolSlugSubmatchRouteImport.update({
    id: '/symbol/$symbolSlug/submatch',
    path: '/symbol/$symbolSlug/submatch',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/symbol/$symbolSlug/submatch': typeof SymbolSymbolSlugSubmatchRoute
  '/symbol/$symbolSlug': typeof SymbolSymbolSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/symbol/$symbolSlug/submatch': typeof SymbolSymbolSlugSubmatchRoute
  '/symbol/$symbolSlug': typeof SymbolSymbolSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/search': typeof SearchRoute
  '/symbol/$symbolSlug/submatch': typeof SymbolSymbolSlugSubmatchRoute
  '/symbol/$symbolSlug/': typeof SymbolSymbolSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/search'
    | '/symbol/$symbolSlug/submatch'
    | '/symbol/$symbolSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/search'
    | '/symbol/$symbolSlug/submatch'
    | '/symbol/$symbolSlug'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/search'
    | '/symbol/$symbolSlug/submatch'
    | '/symbol/$symbolSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SearchRoute: typeof SearchRoute
  SymbolSymbolSlugSubmatchRoute: typeof SymbolSymbolSlugSubmatchRoute
  SymbolSymbolSlugIndexRoute: typeof SymbolSymbolSlugIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/symbol/$symbolSlug/': {
      id: '/symbol/$symbolSlug/'
      path: '/symbol/$symbolSlug'
      fullPath: '/symbol/$symbolSlug'
      preLoaderRoute: typeof SymbolSymbolSlugIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/symbol/$symbolSlug/submatch': {
      id: '/symbol/$symbolSlug/submatch'
      path: '/symbol/$symbolSlug/submatch'
      fullPath: '/symbol/$symbolSlug/submatch'
      preLoaderRoute: typeof SymbolSymbolSlugSubmatchRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SearchRoute: SearchRoute,
  SymbolSymbolSlugSubmatchRoute: SymbolSymbolSlugSubmatchRoute,
  SymbolSymbolSlugIndexRoute: SymbolSymbolSlugIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
